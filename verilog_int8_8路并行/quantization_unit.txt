module quantization_unit #(
    parameter integer DATA_WIDTH       = 8,
    parameter integer ACC_WIDTH        = 32,
    parameter integer BIAS_WIDTH       = 32,
    parameter signed [ACC_WIDTH+31:0] OUTPUT_ZERO_POINT = 180,
    parameter signed [31:0]           OUTPUT_MULTIPLIER  = 1198999149,
    parameter integer                 OUTPUT_SHIFT       = 11
)(
    input  wire signed [ACC_WIDTH-1:0] accumulator_in,
    input  wire signed [BIAS_WIDTH-1:0] bias_in,
    output reg  signed [DATA_WIDTH-1:0] clamped_output
);
    // 先把 bias 加到 accumulator
    wire signed [ACC_WIDTH:0] acc_with_bias = accumulator_in + bias_in;

    // --- 恢复所有信号的原始位宽 ---
    // 乘法
    wire signed [ACC_WIDTH+31:0] mult    = acc_with_bias * OUTPUT_MULTIPLIER;
    // 算术右移
    wire signed [ACC_WIDTH+31:0] shifted = mult >>> OUTPUT_SHIFT;
    // 正确地加上已扩宽的零点
    wire signed [ACC_WIDTH+31:0] with_zp = shifted + OUTPUT_ZERO_POINT;

    // 定义同样宽度的饱和上下限
    localparam signed [ACC_WIDTH+31:0] MAX_VAL = { {(ACC_WIDTH+31-DATA_WIDTH+1){1'b0}}, {1'b0, {DATA_WIDTH-1{1'b1}}} };
    localparam signed [ACC_WIDTH+31:0] MIN_VAL = { {(ACC_WIDTH+31-DATA_WIDTH+1){1'b1}}, {1'b1, {DATA_WIDTH-1{1'b0}}} };

    always @(*) begin
        if (with_zp > MAX_VAL)
            clamped_output = MAX_VAL[DATA_WIDTH-1:0];
        else if (with_zp < MIN_VAL)
            clamped_output = MIN_VAL[DATA_WIDTH-1:0];
        else
            clamped_output = with_zp[DATA_WIDTH-1:0];
    end
endmodule