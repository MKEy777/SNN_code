`timescale 1ns / 1ps

module output_layer #(
    parameter integer       PARALLEL_FACTOR    = 8,
    parameter INPUT_SIZE         = 128,
    parameter OUTPUT_SIZE        = 3,
    parameter INPUT_DATA_WIDTH   = 8,
    parameter OUTPUT_DATA_WIDTH  = 16,
    parameter ACC_WIDTH          = 32,
    parameter BIAS_WIDTH         = 32,
    parameter WEIGHT_ROM_FILE    = "output_w_rom.mem",
    parameter BIAS_ROM_FILE      = "output_b_rom.mem",
    parameter integer LOGITS_SCALE_SHIFT = 8,
    // --- 【新增】接收来自顶层的输入零点参数 ---
    parameter signed [8:0] INPUT_ZERO_POINT = 0
)(
    // ... 端口列表不变 ...
    input  wire                             clk,
    input  wire                             rst_n,
    input  wire                             i_valid,
    output wire                             i_ready,
    output wire                             o_valid,
    input  wire                             o_ready,
    input  wire signed [INPUT_SIZE*INPUT_DATA_WIDTH-1:0]   i_spikes,
    output wire signed [OUTPUT_SIZE*OUTPUT_DATA_WIDTH-1:0] o_logits
);

    // ... 内部逻辑不变 ...
    localparam WORDS_PER_NEURON = (INPUT_SIZE + PARALLEL_FACTOR - 1) / PARALLEL_FACTOR;
    localparam ROM_ADDR_WIDTH   = $clog2(OUTPUT_SIZE * WORDS_PER_NEURON);
    localparam FSM_IDLE         = 2'd0, FSM_CALC = 2'd1, FSM_FINISH = 2'd2, FSM_DONE = 2'd3;
    reg [1:0] current_state, next_state;
    reg [$clog2(INPUT_SIZE):0]    input_cnt;
    reg [$clog2(OUTPUT_SIZE)-1:0] output_cnt;
    reg signed [INPUT_DATA_WIDTH-1:0]             i_spikes_mem [0:INPUT_SIZE-1];
    reg signed [OUTPUT_SIZE*OUTPUT_DATA_WIDTH-1:0] o_logits_reg;
    reg signed [ACC_WIDTH-1:0]              accumulator_full;
    reg signed [INPUT_DATA_WIDTH*PARALLEL_FACTOR-1:0] parallel_input_data_reg;
    reg                                     pipeline_fill_cycle;
    reg                                     is_first_accumulation;
    wire signed [BIAS_WIDTH-1:0]                         bias_data;
    wire signed [INPUT_DATA_WIDTH*PARALLEL_FACTOR-1:0]   parallel_weight_data;
    wire signed [INPUT_DATA_WIDTH*PARALLEL_FACTOR-1:0]   parallel_input_data;
    wire signed [ACC_WIDTH-1:0]                          sum_of_products;
    wire signed [OUTPUT_DATA_WIDTH-1:0]                  clamped_output;
    wire is_last_mac_cycle = (input_cnt >= INPUT_SIZE);
    wire is_last_neuron    = (output_cnt == OUTPUT_SIZE - 1);
    
    // --- 【修改】将接收到的INPUT_ZERO_POINT传递给计算引擎 ---
    parallel_compute_engine #(
        .PARALLEL_FACTOR(PARALLEL_FACTOR),
        .DATA_WIDTH(INPUT_DATA_WIDTH),
        .ACC_WIDTH(ACC_WIDTH),
        .INPUT_ZERO_POINT(INPUT_ZERO_POINT) // 使用从顶层传入的参数
    ) u_compute_engine (
        .parallel_inputs(parallel_input_data_reg),
        .parallel_weights(parallel_weight_data),
        .sum_of_products(sum_of_products)
    );

    // ... 其余逻辑完全不变 ...
    wire signed [ACC_WIDTH-1:0] acc_with_bias = accumulator_full + $signed(bias_data);
    wire signed [ACC_WIDTH-1:0] scaled_val_full = $signed(acc_with_bias) >>> LOGITS_SCALE_SHIFT;
    localparam SIGNED_16_MAX = 32767, SIGNED_16_MIN = -32768;
    assign clamped_output = (scaled_val_full > SIGNED_16_MAX) ? SIGNED_16_MAX : (scaled_val_full < SIGNED_16_MIN) ? SIGNED_16_MIN : scaled_val_full[OUTPUT_DATA_WIDTH-1:0];
    rom_sync #( 
        .DATA_WIDTH (INPUT_DATA_WIDTH * PARALLEL_FACTOR), 
        .ADDR_WIDTH (ROM_ADDR_WIDTH),
        .MEM_FILE (WEIGHT_ROM_FILE) 
    ) weight_rom ( 
        .clk(clk), 
        .addr(output_cnt * WORDS_PER_NEURON + (input_cnt / PARALLEL_FACTOR)), 
        .data_out(parallel_weight_data) 
    );
    rom_sync #( .DATA_WIDTH (BIAS_WIDTH), .ADDR_WIDTH ($clog2(OUTPUT_SIZE)), .MEM_FILE (BIAS_ROM_FILE) ) bias_rom ( .clk(clk), .addr(output_cnt), .data_out(bias_data) );
    assign i_ready  = (current_state == FSM_IDLE);
    genvar k;
    generate for (k = 0; k < PARALLEL_FACTOR; k = k + 1) begin
        assign parallel_input_data[k*INPUT_DATA_WIDTH +: INPUT_DATA_WIDTH] = ((input_cnt + k) < INPUT_SIZE) ? i_spikes_mem[input_cnt + k] : 0;
    end endgenerate
    always @(*) begin
        next_state = current_state;
        case (current_state)
            FSM_IDLE:   if (i_valid) next_state = FSM_CALC;
            FSM_CALC:   if (is_last_mac_cycle) next_state = FSM_FINISH;
            FSM_FINISH: if (is_last_neuron) next_state = FSM_DONE;
                        else next_state = FSM_CALC;
            FSM_DONE:   if (o_ready) next_state = FSM_IDLE;
        endcase
    end
    integer j;
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            current_state <= FSM_IDLE;
            input_cnt <= 0; output_cnt <= 0;
            accumulator_full <= 0;
            o_logits_reg <= 0;
            parallel_input_data_reg <= 0;
            pipeline_fill_cycle <= 1'b0;
            is_first_accumulation <= 1'b0;
        end else begin
            current_state <= next_state;
            parallel_input_data_reg <= parallel_input_data;
            case (current_state)
                FSM_IDLE: begin
                    if (i_valid) begin
                        for (j = 0; j < INPUT_SIZE; j = j + 1) begin i_spikes_mem[j] <= i_spikes[j*INPUT_DATA_WIDTH +: INPUT_DATA_WIDTH]; end
                        input_cnt <= 0; output_cnt <= 0; accumulator_full <= 0;
                        pipeline_fill_cycle <= 1'b1;
                        is_first_accumulation <= 1'b1;
                    end
                end
                FSM_CALC: begin
                    if (pipeline_fill_cycle) begin
                    end else if (is_first_accumulation) begin
                        accumulator_full <= sum_of_products;
                    end else begin
                        accumulator_full <= accumulator_full + sum_of_products;
                    end
                    pipeline_fill_cycle <= 1'b0;
                    if (!pipeline_fill_cycle) begin
                        is_first_accumulation <= 1'b0;
                    end
                    input_cnt <= input_cnt + PARALLEL_FACTOR;
                end
                FSM_FINISH: begin
                    o_logits_reg[output_cnt*OUTPUT_DATA_WIDTH +: OUTPUT_DATA_WIDTH] <= clamped_output;
                    if (!is_last_neuron) begin
                        output_cnt <= output_cnt + 1;
                        input_cnt <= 0;
                        accumulator_full <= 0;
                        pipeline_fill_cycle <= 1'b1;
                        is_first_accumulation <= 1'b1;
                    end
                end
                FSM_DONE: begin
                    if (o_ready) begin input_cnt <= 0; output_cnt <= 0; end
                end
            endcase
        end
    end
    assign o_valid  = (current_state == FSM_DONE);
    assign o_logits = o_logits_reg;

endmodule